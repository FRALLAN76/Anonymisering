# Create and activate virtual environment
python3 -m venv swedish-anonymizer-env
source swedish-anonymizer-env/bin/activate  # Linux/Mac
# OR on Windows: swedish-anonymizer-env\Scripts\activate

# Upgrade pip
pip install --upgrade pip

# Create project directory
mkdir swedish-email-anonymizer && cd swedish-email-anonymizer

# Install requirements
pip install torch transformers tokenizers

# Create the anonymizer script
cat > swedish_anonymizer.py << 'EOF'
from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification
import re
import glob
import os

class SwedishEmailAnonymizer:
    def __init__(self):
        print("🇸🇪 Loading Swedish BERT NER model from KBLab...")
        print("   (This may take a few minutes on first run - downloading ~1.3GB)")
        
        self.tokenizer = AutoTokenizer.from_pretrained('KB/bert-base-swedish-cased-ner')
        self.model = AutoModelForTokenClassification.from_pretrained('KB/bert-base-swedish-cased-ner')
        self.nlp = pipeline('ner', 
                           model=self.model, 
                           tokenizer=self.tokenizer,
                           aggregation_strategy='simple')
        print("✅ Model loaded successfully!")

    def detect_swedish_patterns(self, text):
        """Detect Swedish-specific patterns like personnummer, phone numbers, etc."""
        patterns = {
            'PERSONNUMMER': r'\b\d{6}-\d{4}\b|\b\d{8}-\d{4}\b|\b\d{10}\b|\b\d{12}\b',
            'TELEFON': r'\b0\d{1,3}[- ]?\d{6,8}\b|\b\+46[- ]?\d{1,3}[- ]?\d{6,8}\b',
            'POSTNUMMER': r'\b\d{3}\s?\d{2}\b(?=\s+[A-ZÅÄÖ])',
            'EMAIL': r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        }
        
        found = []
        for pattern_type, pattern in patterns.items():
            for match in re.finditer(pattern, text):
                found.append({
                    'entity_group': pattern_type,
                    'start': match.start(),
                    'end': match.end(),
                    'word': match.group(),
                    'score': 0.99
                })
        return found

    def anonymize_text(self, text):
        """Anonymize Swedish text using BERT + regex patterns"""
        if not text.strip():
            return text, []
            
        # Get NER results from Swedish BERT
        try:
            ner_results = self.nlp(text)
        except Exception as e:
            print(f"   Warning: NER failed for text snippet: {e}")
            ner_results = []
        
        # Get Swedish pattern matches
        pattern_results = self.detect_swedish_patterns(text)
        
        # Combine and sort by position (reverse order for safe replacement)
        all_entities = ner_results + pattern_results
        all_entities.sort(key=lambda x: x['start'], reverse=True)
        
        # Swedish anonymization mapping
        replacements = {
            'PRS': '<PERSON>',
            'PERSON': '<PERSON>',
            'LOC': '<PLATS>',
            'LOCATION': '<PLATS>',
            'ORG': '<ORGANISATION>',
            'ORGANIZATION': '<ORGANISATION>',
            'TME': '<DATUM>',
            'DATE_TIME': '<DATUM>',
            'EVN': '<HÄNDELSE>',
            'EVENT': '<HÄNDELSE>',
            'PERSONNUMMER': '<PERSONNUMMER>',
            'TELEFON': '<TELEFON>',
            'POSTNUMMER': '<POSTNUMMER>',
            'EMAIL': '<EPOST>'
        }
        
        # Replace entities (working backwards to preserve positions)
        result = text
        entities_replaced = []
        
        for entity in all_entities:
            if entity['score'] > 0.7:  # Confidence threshold
                entity_type = entity['entity_group']
                replacement = replacements.get(entity_type, f'<{entity_type}>')
                start, end = entity['start'], entity['end']
                original_word = result[start:end]
                result = result[:start] + replacement + result[end:]
                entities_replaced.append({
                    'type': entity_type,
                    'original': original_word,
                    'replacement': replacement,
                    'confidence': entity['score']
                })
        
        return result, entities_replaced

    def process_email_file(self, filepath):
        """Process a single email file"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Simple email parsing
            lines = content.split('\n')
            headers = {}
            body_start = 0
            
            # Extract headers
            for i, line in enumerate(lines):
                if ':' in line and i < 20:  # Headers usually in first 20 lines
                    try:
                        key, value = line.split(':', 1)
                        headers[key.strip()] = value.strip()
                    except ValueError:
                        continue
                elif line.strip() == '':
                    body_start = i + 1
                    break
            
            body = '\n'.join(lines[body_start:])
            subject = headers.get('Subject', '')
            
            # Anonymize subject and body
            anon_subject, subject_entities = self.anonymize_text(subject)
            anon_body, body_entities = self.anonymize_text(body)
            
            total_entities = len(subject_entities) + len(body_entities)
            
            return {
                'file': filepath,
                'headers': headers,
                'anonymized_subject': anon_subject,
                'anonymized_body': anon_body,
                'entities_replaced': {
                    'subject': subject_entities,
                    'body': body_entities
                },
                'total_entities': total_entities
            }
            
        except Exception as e:
            print(f"❌ Error processing {filepath}: {e}")
            return None

    def process_folder(self, folder='emails'):
        """Process all emails in folder"""
        # Create directories
        os.makedirs(folder, exist_ok=True)
        os.makedirs('output', exist_ok=True)
        
        # Find email files
        email_extensions = ['*.eml', '*.txt', '*.msg']
        files = []
        for ext in email_extensions:
            files.extend(glob.glob(f'{folder}/{ext}'))
        
        if not files:
            print(f"📁 No email files found in '{folder}/' folder")
            print(f"   Supported formats: .eml, .txt, .msg")
            print(f"   Add some email files and run again")
            return
        
        print(f"📧 Found {len(files)} email files to process...")
        print()
        
        total_entities_found = 0
        
        for filepath in files:
            filename = os.path.basename(filepath)
            print(f"   Processing: {filename}")
            
            result = self.process_email_file(filepath)
            if result:
                # Save anonymized version
                base_name = os.path.splitext(filename)[0]
                output_name = f"{base_name}_anonymized.txt"
                output_path = f"output/{output_name}"
                
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(f"ANONYMISERAD EMAIL\n")
                    f.write(f"Originalfil: {filename}\n")
                    f.write(f"Bearbetad: {result['total_entities']} entiteter anonymiserade\n")
                    f.write(f"{'='*50}\n\n")
                    
                    f.write(f"Ämne: {result['anonymized_subject']}\n")
                    for header, value in result['headers'].items():
                        if header not in ['Subject']:
                            f.write(f"{header}: {value}\n")
                    
                    f.write(f"\n{'='*50}\n")
                    f.write("INNEHÅLL:\n")
                    f.write(f"{'='*50}\n\n")
                    f.write(result['anonymized_body'])
                    
                    # Add summary of what was anonymized
                    f.write(f"\n\n{'='*50}\n")
                    f.write("ANONYMISERINGSRAPPORT:\n")
                    f.write(f"{'='*50}\n")
                    
                    all_entities = result['entities_replaced']['subject'] + result['entities_replaced']['body']
                    if all_entities:
                        f.write("Följande information anonymiserades:\n\n")
                        for entity in all_entities:
                            f.write(f"- {entity['type']}: '{entity['original']}' → '{entity['replacement']}' (konfidens: {entity['confidence']:.2f})\n")
                    else:
                        f.write("Ingen personlig information hittades att anonymisera.\n")
                
                total_entities_found += result['total_entities']
                print(f"     ✅ Saved: {output_name} ({result['total_entities']} entities anonymized)")
            else:
                print(f"     ❌ Failed to process {filename}")
        
        print()
        print(f"🎉 Processing complete!")
        print(f"   📁 Results saved in 'output/' folder")
        print(f"   🔒 Total entities anonymized: {total_entities_found}")
        print(f"   📊 Average per file: {total_entities_found/len(files):.1f}")

if __name__ == "__main__":
    print("🇸🇪 SVENSK EMAIL-ANONYMISERING")
    print("Använder KBLab BERT för svensk NER")
    print("=" * 50)
    print()
    
    try:
        anonymizer = SwedishEmailAnonymizer()
        anonymizer.process_folder()
    except KeyboardInterrupt:
        print("\n\n⚠️  Process interrupted by user")
    except Exception as e:
        print(f"\n❌ Error: {e}")
        print("Check that you have internet connection for first-time model download")
EOF

# Create example Swedish email
mkdir emails
cat > emails/test_kommun.eml << 'EOF'
From: erik.andersson@stockholms.kommun.se
To: anna.larsson@example.se
Subject: Skattebeslut för fastigheten Storgatan 15, Stockholm
Date: Mon, 1 Jun 2024 10:00:00 +0000

Hej Anna Larsson,

Din skattebedömning för fastigheten på Storgatan 15 (personnummer: 19850615-1234) 
har slutförts av Stockholms kommun.

Vänligen kontakta oss på telefon 08-123 456 78 eller besök vårt kontor på 
Stadshuset, Hantverkargatan 1, 11152 Stockholm för eventuella frågor.

Bedömningsbelopp: 25 000 kronor för taxeringsåret 2024
Fastighetsadress: Storgatan 15, 11122 Stockholm
Fastighetsbeteckning: Stockholm Södermalm 1:234

Kontaktuppgifter:
Erik Andersson
Skattebedömningsavdelningen  
Stockholms Kommun
Telefon: 08-987 654 32
E-post: erik.andersson@stockholms.kommun.se

Överklagan kan göras till Förvaltningsrätten inom 30 dagar.

Med vänliga hälsningar,
Erik Andersson
Handläggare
EOF

# Create requirements.txt
cat > requirements.txt << 'EOF'
torch>=1.9.0
transformers>=4.20.0
tokenizers>=0.12.0
EOF

# Create activation script
cat > activate.sh << 'EOF'
#!/bin/bash
echo "🇸🇪 Aktiverar svensk email-anonymiseringsmiljö..."
source ../swedish-anonymizer-env/bin/activate
echo "✅ Virtual environment aktiverat!"
echo ""
echo "Kör: python swedish_anonymizer.py"
EOF

chmod +x activate.sh

echo "✅ Complete Swedish email anonymizer setup created!"
echo ""
echo "📁 Structure:"
echo "   swedish-anonymizer-env/    (virtual environment)"
echo "   swedish-email-anonymizer/  (project folder)"
echo "   ├── emails/test_kommun.eml (example Swedish email)"
echo "   ├── output/                (results will appear here)"
echo "   ├── swedish_anonymizer.py  (main script)"
echo "   ├── requirements.txt"
echo "   └── activate.sh"
echo ""
echo "🚀 To run:"
echo "   cd swedish-email-anonymizer"
echo "   python swedish_anonymizer.py"
echo ""
echo "💡 Tips:"
echo "   • Model downloads ~1.3GB on first run"
echo "   • Add your .eml/.txt files to emails/ folder"
echo "   • Check output/ folder for anonymized results"
echo "   • Use ./activate.sh to reactivate environment later"
