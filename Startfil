Run this

# Create the complete Presidio email anonymization setup
mkdir -p presidio-email-setup/{emails,output} && cd presidio-email-setup

# Create docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  presidio-analyzer:
    image: mcr.microsoft.com/presidio-analyzer:latest
    ports:
      - "5001:3000"
    environment:
      - PORT=3000
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output

  presidio-anonymizer:
    image: mcr.microsoft.com/presidio-anonymizer:latest
    ports:
      - "5002:3000"
    environment:
      - PORT=3000
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output

  email-processor:
    build: .
    depends_on:
      - presidio-analyzer
      - presidio-anonymizer
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output
    environment:
      - ANALYZER_URL=http://presidio-analyzer:3000
      - ANONYMIZER_URL=http://presidio-anonymizer:3000
EOF

# Create Dockerfile
cat > Dockerfile << 'EOF'
FROM python:3.9-slim

WORKDIR /app

# Install required packages
RUN pip install requests python-multipart

# Copy processing script
COPY email_processor.py .
COPY requirements.txt .

RUN pip install -r requirements.txt

CMD ["python", "email_processor.py"]
EOF

# Create requirements.txt
cat > requirements.txt << 'EOF'
requests
python-multipart
email-validator
EOF

# Create email_processor.py
cat > email_processor.py << 'EOF'
import requests
import json
import os
import email
from email import policy
import glob
import time

# Presidio service URLs
ANALYZER_URL = os.getenv('ANALYZER_URL', 'http://localhost:5001')
ANONYMIZER_URL = os.getenv('ANONYMIZER_URL', 'http://localhost:5002')

def analyze_text(text):
    """Send text to Presidio Analyzer"""
    payload = {
        "text": text,
        "language": "en"
    }
    
    response = requests.post(
        f"{ANALYZER_URL}/analyze",
        json=payload,
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Analyzer error: {response.status_code} - {response.text}")
        return []

def anonymize_text(text, analyzer_results):
    """Send text and analysis results to Presidio Anonymizer"""
    payload = {
        "text": text,
        "analyzer_results": analyzer_results
    }
    
    response = requests.post(
        f"{ANONYMIZER_URL}/anonymize",
        json=payload,
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code == 200:
        return response.json()['text']
    else:
        print(f"Anonymizer error: {response.status_code} - {response.text}")
        return text

def process_email_content(text):
    """Complete anonymization pipeline"""
    # Analyze for PII
    analyzer_results = analyze_text(text)
    
    # Anonymize based on analysis
    anonymized_text = anonymize_text(text, analyzer_results)
    
    return anonymized_text, analyzer_results

def process_email_file(file_path):
    """Process a single email file"""
    try:
        with open(file_path, 'rb') as f:
            msg = email.message_from_binary_file(f, policy=policy.default)
        
        # Extract email parts
        subject = msg.get('Subject', '')
        sender = msg.get('From', '')
        recipient = msg.get('To', '')
        date = msg.get('Date', '')
        
        # Get body content
        if msg.is_multipart():
            body = ""
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    try:
                        body += part.get_content()
                    except:
                        body += str(part.get_payload())
        else:
            try:
                body = msg.get_content()
            except:
                body = str(msg.get_payload())
        
        # Process subject and body
        anonymized_subject, subject_analysis = process_email_content(subject)
        anonymized_body, body_analysis = process_email_content(body)
        
        return {
            'original_file': file_path,
            'original_subject': subject,
            'anonymized_subject': anonymized_subject,
            'original_body': body,
            'anonymized_body': anonymized_body,
            'from': sender,
            'to': recipient,
            'date': date,
            'pii_found': {
                'subject': subject_analysis,
                'body': body_analysis
            }
        }
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

def process_all_emails():
    """Process all emails in the emails directory"""
    email_dir = "/app/emails"
    output_dir = "/app/output"
    
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Find all email files
    email_files = []
    for ext in ['*.eml', '*.msg', '*.txt']:
        email_files.extend(glob.glob(os.path.join(email_dir, ext)))
    
    print(f"Found {len(email_files)} email files to process")
    
    # Process each file
    for email_file in email_files:
        print(f"Processing: {os.path.basename(email_file)}")
        
        result = process_email_file(email_file)
        
        if result:
            # Save anonymized email
            output_filename = os.path.basename(email_file).replace('.eml', '_anonymized.txt')
            output_path = os.path.join(output_dir, output_filename)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(f"Subject: {result['anonymized_subject']}\n")
                f.write(f"From: {result['from']}\n")
                f.write(f"To: {result['to']}\n") 
                f.write(f"Date: {result['date']}\n")
                f.write(f"Original File: {result['original_file']}\n")
                f.write("\n" + "="*50 + "\n")
                f.write("ANONYMIZED EMAIL CONTENT:\n")
                f.write("="*50 + "\n\n")
                f.write(result['anonymized_body'])
            
            # Save analysis report
            report_filename = os.path.basename(email_file).replace('.eml', '_analysis.json')
            report_path = os.path.join(output_dir, report_filename)
            
            with open(report_path, 'w') as f:
                json.dump(result['pii_found'], f, indent=2)
            
            print(f"âœ“ Saved: {output_filename}")
        
        # Small delay to avoid overwhelming the services
        time.sleep(0.1)

if __name__ == "__main__":
    print("Waiting for Presidio services to start...")
    time.sleep(10)  # Give services time to start
    
    print("Starting email processing...")
    process_all_emails()
    print("Email processing complete!")
EOF

# Create a sample test email
cat > emails/test.eml << 'EOF'
From: john.doe@municipality.gov
To: jane.smith@example.com
Subject: Tax Assessment for 123 Main Street
Date: Mon, 1 Jun 2024 10:00:00 +0000

Dear Jane Smith,

Your property tax assessment for 123 Main Street (SSN: 123-45-6789) 
has been completed. Please call us at (555) 123-4567 for any questions.

The assessment amount is $2,500 for the property located at:
123 Main Street
Springfield, IL 62701

Best regards,
John Doe
Tax Assessment Department
City of Springfield
Phone: (555) 987-6543
Email: john.doe@municipality.gov
EOF

# Create startup script
cat > start.sh << 'EOF'
#!/bin/bash
echo "Starting Presidio Email Anonymization System..."
echo "=========================================="

# Start services
docker-compose up -d presidio-analyzer presidio-anonymizer

echo "Waiting for services to be ready..."
sleep 15

# Check if services are running
echo "Checking service status..."
docker-compose ps

echo ""
echo "Services started! You can now:"
echo "1. Put your email files (.eml, .msg, .txt) in the 'emails/' folder"
echo "2. Run: docker-compose up email-processor"
echo "3. Check results in the 'output/' folder"
echo ""
echo "To test with the sample email: docker-compose up email-processor"
echo "To stop all services: docker-compose down"
EOF

chmod +x start.sh

# Create complete usage instructions
cat > README.md << 'EOF'
# Presidio Email Anonymization Setup

## Quick Start
1. Put your email files in the `emails/` folder
2. Run: `./start.sh`
3. Process emails: `docker-compose up email-processor`
4. Check results in `output/` folder

## Commands
- Start services: `docker-compose up -d`
- Process emails: `docker-compose up email-processor`
- Stop everything: `docker-compose down`
- View logs: `docker-compose logs`

## File Structure
- `emails/` - Put your original email files here (.eml, .msg, .txt)
- `output/` - Anonymized emails and analysis reports appear here
- Sample test email is already included in emails/test.eml

## Testing
A sample email is already created. Just run:
```bash
./start.sh
docker-compose up email-processor
