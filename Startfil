# Create Swedish Presidio setup with KBLab models
mkdir -p presidio-swedish-setup/{emails,output} && cd presidio-swedish-setup

# Create enhanced email_processor.py with Swedish models
cat > email_processor.py << 'EOF'
import requests
import json
import os
import email
from email import policy
import glob
import time

# Presidio service URLs
ANALYZER_URL = os.getenv('ANALYZER_URL', 'http://localhost:5001')
ANONYMIZER_URL = os.getenv('ANONYMIZER_URL', 'http://localhost:5002')

def analyze_text_swedish(text):
    """Send Swedish text to Presidio Analyzer with Swedish model"""
    payload = {
        "text": text,
        "language": "sv",  # Swedish language code
        "nlp_artifacts": None,
        "entities": ["PERSON", "LOCATION", "ORGANIZATION", "DATE_TIME", "PHONE_NUMBER", "EMAIL_ADDRESS"]
    }
    
    response = requests.post(
        f"{ANALYZER_URL}/analyze",
        json=payload,
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Analyzer error: {response.status_code} - {response.text}")
        return []

def anonymize_text(text, analyzer_results):
    """Send text and analysis results to Presidio Anonymizer"""
    payload = {
        "text": text,
        "analyzer_results": analyzer_results,
        "transformations": {
            "PERSON": {"type": "replace", "new_value": "<PERSON>"},
            "LOCATION": {"type": "replace", "new_value": "<PLATS>"},
            "ORGANIZATION": {"type": "replace", "new_value": "<ORGANISATION>"},
            "DATE_TIME": {"type": "replace", "new_value": "<DATUM>"},
            "PHONE_NUMBER": {"type": "replace", "new_value": "<TELEFON>"},
            "EMAIL_ADDRESS": {"type": "replace", "new_value": "<EPOST>"}
        }
    }
    
    response = requests.post(
        f"{ANONYMIZER_URL}/anonymize",
        json=payload,
        headers={'Content-Type': 'application/json'}
    )
    
    if response.status_code == 200:
        return response.json()['text']
    else:
        print(f"Anonymizer error: {response.status_code} - {response.text}")
        return text

def process_email_content(text):
    """Complete Swedish anonymization pipeline"""
    # Analyze for Swedish PII
    analyzer_results = analyze_text_swedish(text)
    
    # Anonymize based on analysis
    anonymized_text = anonymize_text(text, analyzer_results)
    
    return anonymized_text, analyzer_results

# Rest of the code remains the same...
def process_email_file(file_path):
    """Process a single email file with Swedish models"""
    try:
        with open(file_path, 'rb') as f:
            msg = email.message_from_binary_file(f, policy=policy.default)
        
        # Extract email parts
        subject = msg.get('Subject', '')
        sender = msg.get('From', '')
        recipient = msg.get('To', '')
        date = msg.get('Date', '')
        
        # Get body content
        if msg.is_multipart():
            body = ""
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    try:
                        body += part.get_content()
                    except:
                        body += str(part.get_payload())
        else:
            try:
                body = msg.get_content()
            except:
                body = str(msg.get_payload())
        
        # Process subject and body with Swedish models
        anonymized_subject, subject_analysis = process_email_content(subject)
        anonymized_body, body_analysis = process_email_content(body)
        
        return {
            'original_file': file_path,
            'original_subject': subject,
            'anonymized_subject': anonymized_subject,
            'original_body': body,
            'anonymized_body': anonymized_body,
            'from': sender,
            'to': recipient,
            'date': date,
            'pii_found': {
                'subject': subject_analysis,
                'body': body_analysis
            }
        }
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

def process_all_emails():
    """Process all emails in the emails directory"""
    email_dir = "/app/emails"
    output_dir = "/app/output"
    
    os.makedirs(output_dir, exist_ok=True)
    
    email_files = []
    for ext in ['*.eml', '*.msg', '*.txt']:
        email_files.extend(glob.glob(os.path.join(email_dir, ext)))
    
    print(f"Hittade {len(email_files)} email-filer att bearbeta")
    
    for email_file in email_files:
        print(f"Bearbetar: {os.path.basename(email_file)}")
        
        result = process_email_file(email_file)
        
        if result:
            output_filename = os.path.basename(email_file).replace('.eml', '_anonymiserad.txt')
            output_path = os.path.join(output_dir, output_filename)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(f"Ämne: {result['anonymized_subject']}\n")
                f.write(f"Från: {result['from']}\n")
                f.write(f"Till: {result['to']}\n") 
                f.write(f"Datum: {result['date']}\n")
                f.write(f"Originalfil: {result['original_file']}\n")
                f.write("\n" + "="*50 + "\n")
                f.write("ANONYMISERAT EMAIL-INNEHÅLL:\n")
                f.write("="*50 + "\n\n")
                f.write(result['anonymized_body'])
            
            report_filename = os.path.basename(email_file).replace('.eml', '_analys.json')
            report_path = os.path.join(output_dir, report_filename)
            
            with open(report_path, 'w') as f:
                json.dump(result['pii_found'], f, indent=2, ensure_ascii=False)
            
            print(f"✓ Sparad: {output_filename}")
        
        time.sleep(0.1)

if __name__ == "__main__":
    print("Väntar på att Presidio-tjänsterna ska starta...")
    time.sleep(10)
    
    print("Startar email-bearbetning med svenska modeller...")
    process_all_emails()
    print("Email-bearbetning klar!")
EOF

# Create Swedish model configuration
cat > swedish_nlp_config.yml << 'EOF'
nlp_engine_name: transformers
models:
  - lang_code: sv
    model_name: 
      spacy: sv_core_news_sm
      transformers: KB/bert-base-swedish-cased-ner
    ner_model_configuration:
      labels_to_ignore:
        - O
      aggregation_strategy: max
      stride: 16
      alignment_mode: expand
      model_to_presidio_entity_mapping:
        PRS: PERSON
        LOC: LOCATION  
        ORG: ORGANIZATION
        TME: DATE_TIME
        EVN: EVENT
      low_confidence_score_multiplier: 0.4
      low_score_entity_names:
        - EVENT
EOF

# Create Swedish test email
cat > emails/test_svenska.eml << 'EOF'
From: erik.andersson@kommun.se
To: anna.larsson@example.se
Subject: Skattebeslut för Storgatan 15
Date: Mon, 1 Jun 2024 10:00:00 +0000

Hej Anna Larsson,

Din skattebedömning för fastigheten på Storgatan 15 (personnummer: 19850615-1234) 
har slutförts. Vänligen kontakta oss på 08-123 456 78 för eventuella frågor.

Bedömningsbeloppet är 25 000 kronor för fastigheten belägen på:
Storgatan 15
Stockholm, 11122

Med vänliga hälsningar,
Erik Andersson
Skattebedömningsavdelningen
Stockholms Kommun
Telefon: 08-987 654 32
E-post: erik.andersson@kommun.se
EOF

# Create custom Dockerfile with Swedish models
cat > Dockerfile << 'EOF'
FROM python:3.9-slim

WORKDIR /app

# Install required packages
RUN pip install requests python-multipart transformers torch

# Copy processing script and config
COPY email_processor.py .
COPY requirements.txt .
COPY swedish_nlp_config.yml .

RUN pip install -r requirements.txt

# Pre-download Swedish models to speed up runtime
RUN python -c "from transformers import AutoTokenizer, AutoModel; AutoTokenizer.from_pretrained('KB/bert-base-swedish-cased-ner'); AutoModel.from_pretrained('KB/bert-base-swedish-cased-ner')"

CMD ["python", "email_processor.py"]
EOF

# Update requirements for Swedish models
cat > requirements.txt << 'EOF'
requests
python-multipart
email-validator
transformers
torch
EOF

# Standard docker-compose.yml (same as before)
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  presidio-analyzer:
    image: mcr.microsoft.com/presidio-analyzer:latest
    ports:
      - "5001:3000"
    environment:
      - PORT=3000
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output
      - ./swedish_nlp_config.yml:/app/config.yml

  presidio-anonymizer:
    image: mcr.microsoft.com/presidio-anonymizer:latest
    ports:
      - "5002:3000"
    environment:
      - PORT=3000
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output

  email-processor:
    build: .
    depends_on:
      - presidio-analyzer
      - presidio-anonymizer
    volumes:
      - ./emails:/app/emails
      - ./output:/app/output
    environment:
      - ANALYZER_URL=http://presidio-analyzer:3000
      - ANONYMIZER_URL=http://presidio-anonymizer:3000
EOF

# Create startup script
cat > start.sh << 'EOF'
#!/bin/bash
echo "Startar Presidio Email Anonymization System med Svenska Modeller..."
echo "=================================================================="

docker-compose up -d presidio-analyzer presidio-anonymizer

echo "Väntar på att tjänsterna ska vara redo..."
sleep 20

echo "Tjänster startade! Du kan nu:"
echo "1. Lägg svenska email-filer (.eml, .msg, .txt) i 'emails/' mappen"
echo "2. Kör: docker-compose up email-processor"
echo "3. Kontrollera resultat i 'output/' mappen"
echo ""
echo "För att testa med det svenska exemplet: docker-compose up email-processor"
echo "För att stoppa alla tjänster: docker-compose down"
EOF

chmod +x start.sh

echo "✅ Svensk Presidio email-anonymiseringssetup skapad!"
echo ""
echo "📁 Katalogstruktur:"
echo "   presidio-swedish-setup/"
echo "   ├── emails/test_svenska.eml (svenska exempel-email)"
echo "   ├── output/ (resultat visas här)"
echo "   ├── swedish_nlp_config.yml (svensk modellkonfiguration)"
echo "   ├── docker-compose.yml"
echo "   ├── Dockerfile (med svenska modeller)"
echo "   ├── email_processor.py"
echo "   └── start.sh"
echo ""
echo "🚀 För att komma igång:"
echo "   1. ./start.sh"
echo "   2. docker-compose up email-processor"
echo "   3. Kontrollera output/ mappen för resultat"
echo ""
echo "🇸🇪 Använder KB/bert-base-swedish-cased-ner för svensk PII-detektering"
